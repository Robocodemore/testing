WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.904
Within our notes, we have saved the Block Data Model.

00:00:03.904 --> 00:00:08.904
This is a great start to our project goal of constructing a simple private block chain.

00:00:08.904 --> 00:00:12.174
Next, we will need it to implement our block data model.

00:00:12.175 --> 00:00:14.130
To kick things off, let's create

00:00:14.130 --> 00:00:18.175
our JavaScript file to start the creation of our private block chain.

00:00:18.175 --> 00:00:20.660
Let's use touch to create a new file.

00:00:20.660 --> 00:00:22.649
For our JavaScript file,

00:00:22.649 --> 00:00:25.019
let's go ahead and call this simple chain.

00:00:25.019 --> 00:00:29.980
So, we'll type in the terminal, touch simpleChain.js.

00:00:31.719 --> 00:00:35.850
At this point, we know our data model will be reuse.

00:00:35.850 --> 00:00:40.035
JavaScript provides many methods to construct a reusable object for us.

00:00:40.034 --> 00:00:43.114
For example, we will utilize classes.

00:00:43.115 --> 00:00:48.285
The class syntax does not introduce a new object oriented inherent model to JavaScript.

00:00:48.284 --> 00:00:51.754
It purely provide syntax sugar.

00:00:51.755 --> 00:00:54.945
Our first step is to find our block class,

00:00:54.945 --> 00:00:57.554
also known as class declaration.

00:00:57.554 --> 00:01:03.005
So, to do that, let's jump in to simple chain to construct our block class.

00:01:03.005 --> 00:01:05.909
On the left-hand side of your window,

00:01:05.909 --> 00:01:07.435
also known as the left panel,

00:01:07.435 --> 00:01:08.879
you should see simpleChain list.

00:01:08.879 --> 00:01:12.304
Double-click on simpleChain.js to open it.

00:01:12.305 --> 00:01:16.030
Perfect. Now, on our top panel within our window,

00:01:16.030 --> 00:01:20.465
we have notes and we have simpleChain.js.

00:01:20.465 --> 00:01:28.700
So, within simpleChain.js, let's go ahead and start constructing our block class,

00:01:28.700 --> 00:01:32.909
class Block, and yeah,

00:01:32.909 --> 00:01:35.439
that's pretty much what a class looks like, right?

00:01:35.439 --> 00:01:37.284
Nothing fancy here.

00:01:37.284 --> 00:01:40.834
Next, we want to establish a class constructor,

00:01:40.834 --> 00:01:46.139
which is a special method for creating and initializing an object created with a class.

00:01:46.140 --> 00:01:49.359
For each class, only one constructor can be created.

00:01:49.359 --> 00:01:53.099
Our block constructor will initialize our block object.

00:01:53.099 --> 00:01:56.879
So, let's go ahead and put that into play.

00:01:56.879 --> 00:02:03.269
Constructor and we have no option for the constructor at this point in time.

00:02:03.269 --> 00:02:06.060
All right. To keep things tidy,

00:02:06.060 --> 00:02:10.835
I'm just going to go ahead and press tab to provide some indentation.

00:02:10.835 --> 00:02:13.075
Within our constructor bracket,

00:02:13.074 --> 00:02:16.969
I'm just going to add a space because I already know that we're going to want

00:02:16.969 --> 00:02:21.819
to establish variables within our constructor.

00:02:21.819 --> 00:02:23.949
Matter of fact, next, let's go ahead,

00:02:23.949 --> 00:02:27.119
and navigate back to our notes,

00:02:27.120 --> 00:02:30.555
and copy our block chain model.

00:02:30.555 --> 00:02:34.210
We'll copy our block chain data model.

00:02:34.210 --> 00:02:38.984
Then, what we're going to do is paste that within our constructor.

00:02:38.984 --> 00:02:42.740
Next, let's go ahead and clean things up a little bit.

00:02:42.740 --> 00:02:46.010
We don't need the open and close brackets

00:02:46.009 --> 00:02:49.609
since we already have that within our constructor.

00:02:49.610 --> 00:02:52.700
We're going to delete those, go ahead,

00:02:52.699 --> 00:02:55.408
and highlight our variables,

00:02:55.408 --> 00:02:57.750
and provide an indentation.

00:02:57.750 --> 00:03:00.625
Now that we have our data model within our constructor,

00:03:00.625 --> 00:03:04.330
let's configure our constructor define class variables.

00:03:04.330 --> 00:03:06.335
This is also known as scope.

00:03:06.335 --> 00:03:09.909
Our current scope is the class Block.

00:03:09.909 --> 00:03:13.185
When you define scope variables,

00:03:13.185 --> 00:03:16.969
in our case, we'll change the hash,

00:03:16.969 --> 00:03:24.965
height, body, time, and previousblockhash to variables within our scope.

00:03:24.965 --> 00:03:31.610
To do that, we're going to simply clean up our variable and put in this.

00:03:31.610 --> 00:03:37.490
This just means this scope and the scope is our block.

00:03:37.490 --> 00:03:41.094
So, we are going to do that for each of our variables.

00:03:41.094 --> 00:03:43.909
Great. That looks much better.

00:03:43.909 --> 00:03:46.849
Let's modify our constructor to support construction

00:03:46.849 --> 00:03:50.055
on variable option for block body called data.

00:03:50.055 --> 00:03:52.340
So, here's our constructor.

00:03:52.340 --> 00:03:56.060
Within it, let's define a variable called data.

00:03:56.060 --> 00:03:58.330
Once we construct a new block,

00:03:58.330 --> 00:04:02.130
we want to go ahead and store data within the block body.

00:04:02.129 --> 00:04:06.715
So, let's go ahead, and remove our array bracket right here,

00:04:06.715 --> 00:04:10.710
and put in our constructors variable called data.

00:04:10.710 --> 00:04:13.435
At this point, let's test our block class.

00:04:13.435 --> 00:04:14.875
Within a terminal session,

00:04:14.875 --> 00:04:17.769
type node to enter node environment.

00:04:17.769 --> 00:04:20.264
Go ahead, and copy our block class,

00:04:20.264 --> 00:04:23.550
and paste it within our node terminal session.

00:04:23.550 --> 00:04:26.155
Let's go ahead and press enter.

00:04:26.154 --> 00:04:28.489
We have a response undefined.

00:04:28.490 --> 00:04:31.785
That's because our class has been created,

00:04:31.785 --> 00:04:33.950
yet it has not been defined yet.

00:04:33.949 --> 00:04:35.704
To use the block class,

00:04:35.704 --> 00:04:38.784
we can assign it a variable or call it directly.

00:04:38.785 --> 00:04:42.235
Let's test directly, testing various data options.

00:04:42.235 --> 00:04:43.879
Remember, at this point,

00:04:43.879 --> 00:04:48.399
our class constructor only supports one variable called data.

00:04:48.399 --> 00:04:52.560
To test, we simply call a new object by typing new,

00:04:52.560 --> 00:04:58.069
followed by the class name along with constructor options for data variable.

00:04:58.069 --> 00:05:03.384
So, to do that, we're simply going to type in new, Block.

00:05:03.384 --> 00:05:05.425
Then, within the Block,

00:05:05.425 --> 00:05:09.185
we're going to have "Some Data".

00:05:09.185 --> 00:05:10.600
Now, if I press enter,

00:05:10.600 --> 00:05:15.240
we're going to get a response that a new block object was created and you'll

00:05:15.240 --> 00:05:20.564
notice that some data was passed right along to the body of our block.

00:05:20.564 --> 00:05:28.449
Wonderful. Now, let's go ahead and test with some different type of data like an array.

00:05:28.449 --> 00:05:32.189
So, I just press the up arrow to repeat the last line.

00:05:32.189 --> 00:05:36.589
This time, let's just go ahead and put in our array.

00:05:36.589 --> 00:05:40.139
Here, we'll just test various options.

00:05:40.139 --> 00:05:44.870
Sure enough, that array pass right on through to our body.

00:05:44.870 --> 00:05:47.579
Well, we can do the same thing with an object,

00:05:47.579 --> 00:05:50.678
and I'm sure that most of you already have this down,

00:05:50.678 --> 00:05:54.164
and very familiar with defining variables with new objects,

00:05:54.165 --> 00:05:56.205
but it's nice to see them in action.

00:05:56.204 --> 00:05:58.120
Great. At this point in time,

00:05:58.120 --> 00:06:01.019
you have copied a block data model.

00:06:01.019 --> 00:06:05.034
Modify the block data model to suit our private block chain needs.

00:06:05.035 --> 00:06:11.305
We then created a simpleChain.js file with a block class that has a constructor,

00:06:11.305 --> 00:06:15.269
that shapes the variables for the class, for our new block.

